#!/usr/bin/env bash

SCRIPT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

MODE=${MODE:-uaa}
#CONF=${CONF:-rabbitmq.conf}
#CONFIG=${CONFIG:-rabbitmq.config}
ADVANCED=${ADVANCED:-advanced.config}
IMAGE_TAG=${IMAGE_TAG:-3.11.13}
IMAGE=${IMAGE:-rabbitmq}

function generate-ca-server-client-kpi {
  NAME=$1

  if [ -d "$NAME" ]; then
    echo "SSL Certificates already present under $NAME. Skip SSL generation"
    return
  fi

  if [ ! -d "$SCRIPT/tls-gen" ]; then
    git clone https://github.com/michaelklishin/tls-gen $SCRIPT/tls-gen
  fi

  echo "Generating CA and Server PKI under $NAME ..."
  mkdir -p $NAME
  cp -r $SCRIPT/tls-gen/* $NAME

  CUR_DIR=$(pwd)
  cd $NAME/basic
  make CN=localhost
  #make PASSWORD=$PASSWORD
  make verify
  make info
  cd $CUR_DIR
}

function deploy {
  if [ "${GENERATE_SSL_CERTS:-false}" == "true" ]; then
      generate-ca-server-client-kpi $SCRIPT/../conf/${MODE}/certs
  fi
  if [ "${MODE}" == "azure" ]; then
    EXTRA_PORTS="-p 15671:15671"
    EXTRA_MOUNTS="-v $SCRIPT/../${MODE}/certs/basic/testca/cacert.pem:/etc/rabbitmq/rabbitmq-ca.crt \
                  -v $SCRIPT/../${MODE}/certs/basic/server_localhost/key.pem:/etc/rabbitmq/rabbitmq.key \
                  -v $SCRIPT/../${MODE}/certs/basic/server_localhost/cert.pem:/etc/rabbitmq/rabbitmq.crt"
  fi


  USED_CONFIG=""

  if [[ -n "${CONFIG}"  &&  -f "$SCRIPT/../${MODE}/${CONFIG}" ]]; then
    EXTRA_MOUNTS="${EXTRA_MOUNTS} -v ${SCRIPT}/../${MODE}/${CONFIG}:/etc/rabbitmq/rabbitmq.config:ro "
    USED_CONFIG="${SCRIPT}/../${MODE}/${CONFIG}"
  elif [ -f "$SCRIPT/../${MODE}/${CONF:-rabbitmq.conf}" ]; then
    EXTRA_MOUNTS="${EXTRA_MOUNTS} -v ${SCRIPT}/../${MODE}/${CONF:-rabbitmq.conf}:/etc/rabbitmq/rabbitmq.conf:ro "
    USED_CONFIG="${SCRIPT}/../${MODE}/${CONF:-rabbitmq.conf}"
  fi

  if [[ -n "${ADVANCED}"  && -f "$SCRIPT/../${MODE}/${ADVANCED}"  ]]; then
    EXTRA_MOUNTS="${EXTRA_MOUNTS} -v ${SCRIPT}/../${MODE}/${ADVANCED}:/etc/rabbitmq/advanced.config:ro "
    USED_CONFIG="${USED_CONFIG} ${SCRIPT}/../${MODE}/${ADVANCED}"
  fi


  docker network inspect rabbitmq_net >/dev/null 2>&1 || docker network create rabbitmq_net
  docker rm -f rabbitmq 2>/dev/null || echo "rabbitmq was not running"
  echo "running RabbitMQ ($IMAGE:$IMAGE_TAG) with configuration under $MODE (configuration file(s) $USED_CONFIG)"
  docker run -d --name rabbitmq --net rabbitmq_net \
      -p 15672:15672 -p 5672:5672 ${EXTRA_PORTS}\
      -v ${SCRIPT}/../conf/enabled_plugins:/etc/rabbitmq/enabled_plugins \
      -v ${SCRIPT}/../conf:/conf ${EXTRA_MOUNTS} ${IMAGE}:${IMAGE_TAG}
}
print() {
  echo -e "${PADDING}$1"
}

wait_for_message() {
  attemps_left=10
  while ! docker logs $1 2>&1 | grep -q "$2";
  do
      sleep 5
      print "Waiting 5sec for $1 to start ($attemps_left attempts left )..."
      ((attemps_left--))
      if [[ "$attemps_left" -lt 1 ]]; then
        print "Timed out waiting"
        exit 1
      fi
  done
}

deploy
wait_for_message rabbitmq "Server startup complete"
